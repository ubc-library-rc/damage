{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"File manifest tools: Damage and FCheck \u00b6 Overview \u00b6 Damage (either DAtaMAnifestGEnerator or a wizard, your choice) is a simple multi-platform utility which creates file manifests in a variety of formats. It was created to deal primarily with statistical data, but it also functions as a generalized file manifest tool. Multiple flavours! \u00b6 Damage comes as both a traditional application (with a handy user interface) or as console utility running in your Windows command prompt/PowerShell/bash session. Download the newest binary version of Damage here: Download Damage A created manifest includes, for all file types: The file name Checksum in your choice of hash for the file. Current flavours of hashes are: sha1, sha224, sha256, sha384, sha512, blake2b, blake2s, md5 Encoding, if available (ie, utf-8, windows-1252, etc.) For plain text files , often used for microdata, the utility also produces information on: Minimum line length Maximum line length Number of records Constant records flag (ie, all lines are of the same length) Row and column of non-ASCII characters A count of null characters Flag for DOS/Windows formatting (ie, carriage return + line feed as opposed to just a line feed). For files in SAS, SPSS and Stata formats (ie, .sas7bdat, .sav and .dta) the utility will provide information on: Number of cases (reported as rows) Number of variables (reported as columns) Note that statistical package files will always be reported as rectangular due to the limitations of parsing them. Output formats are: Plain text Comma Separated Value (ie, a spreadsheet) JSON. This JSON doesn\u2019t conform to any particular standard, but is valid JSON object \u2014 one object for all the files. The command line program will produce output in the format of: {\"files\":[{file1medata}, {file2metadata}, ...{fileNmetadata}]} But that\u2019s not all! \u00b6 The fcheck module \u00b6 While damage is the standalone piece of software that most people will use, the underlying checking mechanism is available as a Python module called fcheck which you can use in your own software. Why would I need this? \u00b6 More than ever, the world today revolves around data sharing. Knowing the data that you\u2019ve downloaded is correct is key. For data distributors damage output can be included as a text file with your data so that you and end users can verify and identify what they\u2019ve downloaded Create detailed version notes with one command Manage changes in file structure using digests which are unique to a particular version of a file, instead of relying on easily changeable file names Easily find duplicate files For researchers damage and fcheck can help with creating descriptive documentation which is required for your research data deposit damage output ensures the integrity of your data set when used by others Detailed software/installation instructions \u00b6 GUI application \u00b6 Use the download button above to download the GUI application. On Windows and Linux, you need only unzip it and run it from wherever you like. On a Mac, double-click the .dmg file and drag the icon to the Applications folder. Console binary files \u00b6 Console binaries of the damage utility are available for Windows and Mac and Linux for Intel processors at fcheck\u2019s release page https://github.com/ubc-library-rc/fcheck/releases . If you don\u2019t already have Python 3 installed (and potentially other python libraries) or you just don\u2019t want to use Python this is the easiest way to proceed. These files don\u2019t need installation and can be run directly from the command line. For ease of use, you might consider adding the files to your PATH. Note that the console binary and the GUI application are called damage and Damage , respectively. This makes a difference on a case-sensitive file system. Important note If you are using both the console binary and the windowed GUI application, you should be careful if both are in your system\u2019s PATH , as this could potentially cause you unforeseen difficulties. Windows users \u00b6 The download should be in a directory that is listed in the %PATH% environment variable. The easiest way to do this is to use the Start menu and type \u201cEnvironment\u201d, then select \u201cEdit Environment variables for your account\u201d. Either place the binary file into a directory listed in Path , or add a new directory to your path using the GUI. Mac and Linux users \u00b6 The easiest way to make this available system wide is simply to copy the executable to the /usr/local/bin directory, which is normally found on the primary drive. In the finder, press CMD-SHIFT-G, then type /usr/local/bin in the box to easily find it. If you don\u2019t like those options, other common locations include, but are not limited to /opt/bin and ~/.local/bin . Installing fcheck and the damage console utility with pip \u00b6 The software is written in Python (>= 3.6), and the source is available as a single file in fcheck.py . If you have Python 3 installed you can either just download that single file to a place of convenience, or you can install it as a Python library by running the following commands in a terminal: pip install git+https://github.com/ubc-library-rc/fcheck.git@master This second method installs the damage command line utility and will also allow you to use the fcheck.Checker class in your own projects, in the traditional import fcheck sort of way. If you don\u2019t care about that, just download a binary or use the Python file directly. It will also automatically install the dependencies for you. Documentation on the module is available via the API reference documentation . Updating with with pip \u00b6 pip install --upgrade git+https://github.com/ubc-library-rc/fcheck.git@master Because the software is not hosted at PyPi, there is a slightly longer update string. Note that while the console binary is updated with pip, the GUI application is not. Source code \u00b6 As you may have surmised from the example above, source code is available at https://github.com/ubc-library-rc/fcheck , along with all of the documentation and binary files.","title":"File manifest tools \u2014 Damage and fcheck"},{"location":"#file-manifest-tools-damage-and-fcheck","text":"","title":"File manifest tools: Damage and FCheck"},{"location":"#overview","text":"Damage (either DAtaMAnifestGEnerator or a wizard, your choice) is a simple multi-platform utility which creates file manifests in a variety of formats. It was created to deal primarily with statistical data, but it also functions as a generalized file manifest tool.","title":"Overview"},{"location":"#multiple-flavours","text":"Damage comes as both a traditional application (with a handy user interface) or as console utility running in your Windows command prompt/PowerShell/bash session. Download the newest binary version of Damage here: Download Damage A created manifest includes, for all file types: The file name Checksum in your choice of hash for the file. Current flavours of hashes are: sha1, sha224, sha256, sha384, sha512, blake2b, blake2s, md5 Encoding, if available (ie, utf-8, windows-1252, etc.) For plain text files , often used for microdata, the utility also produces information on: Minimum line length Maximum line length Number of records Constant records flag (ie, all lines are of the same length) Row and column of non-ASCII characters A count of null characters Flag for DOS/Windows formatting (ie, carriage return + line feed as opposed to just a line feed). For files in SAS, SPSS and Stata formats (ie, .sas7bdat, .sav and .dta) the utility will provide information on: Number of cases (reported as rows) Number of variables (reported as columns) Note that statistical package files will always be reported as rectangular due to the limitations of parsing them. Output formats are: Plain text Comma Separated Value (ie, a spreadsheet) JSON. This JSON doesn\u2019t conform to any particular standard, but is valid JSON object \u2014 one object for all the files. The command line program will produce output in the format of: {\"files\":[{file1medata}, {file2metadata}, ...{fileNmetadata}]}","title":"Multiple flavours!"},{"location":"#but-thats-not-all","text":"","title":"But that's not all!"},{"location":"#the-fcheck-module","text":"While damage is the standalone piece of software that most people will use, the underlying checking mechanism is available as a Python module called fcheck which you can use in your own software.","title":"The fcheck module"},{"location":"#why-would-i-need-this","text":"More than ever, the world today revolves around data sharing. Knowing the data that you\u2019ve downloaded is correct is key. For data distributors damage output can be included as a text file with your data so that you and end users can verify and identify what they\u2019ve downloaded Create detailed version notes with one command Manage changes in file structure using digests which are unique to a particular version of a file, instead of relying on easily changeable file names Easily find duplicate files For researchers damage and fcheck can help with creating descriptive documentation which is required for your research data deposit damage output ensures the integrity of your data set when used by others","title":"Why would I need this?"},{"location":"#detailed-softwareinstallation-instructions","text":"","title":"Detailed software/installation instructions"},{"location":"#gui-application","text":"Use the download button above to download the GUI application. On Windows and Linux, you need only unzip it and run it from wherever you like. On a Mac, double-click the .dmg file and drag the icon to the Applications folder.","title":"GUI application"},{"location":"#console-binary-files","text":"Console binaries of the damage utility are available for Windows and Mac and Linux for Intel processors at fcheck\u2019s release page https://github.com/ubc-library-rc/fcheck/releases . If you don\u2019t already have Python 3 installed (and potentially other python libraries) or you just don\u2019t want to use Python this is the easiest way to proceed. These files don\u2019t need installation and can be run directly from the command line. For ease of use, you might consider adding the files to your PATH. Note that the console binary and the GUI application are called damage and Damage , respectively. This makes a difference on a case-sensitive file system. Important note If you are using both the console binary and the windowed GUI application, you should be careful if both are in your system\u2019s PATH , as this could potentially cause you unforeseen difficulties.","title":"Console binary files"},{"location":"#windows-users","text":"The download should be in a directory that is listed in the %PATH% environment variable. The easiest way to do this is to use the Start menu and type \u201cEnvironment\u201d, then select \u201cEdit Environment variables for your account\u201d. Either place the binary file into a directory listed in Path , or add a new directory to your path using the GUI.","title":"Windows users"},{"location":"#mac-and-linux-users","text":"The easiest way to make this available system wide is simply to copy the executable to the /usr/local/bin directory, which is normally found on the primary drive. In the finder, press CMD-SHIFT-G, then type /usr/local/bin in the box to easily find it. If you don\u2019t like those options, other common locations include, but are not limited to /opt/bin and ~/.local/bin .","title":"Mac and Linux users"},{"location":"#installing-fcheck-and-the-damage-console-utility-with-pip","text":"The software is written in Python (>= 3.6), and the source is available as a single file in fcheck.py . If you have Python 3 installed you can either just download that single file to a place of convenience, or you can install it as a Python library by running the following commands in a terminal: pip install git+https://github.com/ubc-library-rc/fcheck.git@master This second method installs the damage command line utility and will also allow you to use the fcheck.Checker class in your own projects, in the traditional import fcheck sort of way. If you don\u2019t care about that, just download a binary or use the Python file directly. It will also automatically install the dependencies for you. Documentation on the module is available via the API reference documentation .","title":"Installing fcheck and the damage console utility with pip"},{"location":"#updating-with-with-pip","text":"pip install --upgrade git+https://github.com/ubc-library-rc/fcheck.git@master Because the software is not hosted at PyPi, there is a slightly longer update string. Note that while the console binary is updated with pip, the GUI application is not.","title":"Updating with with pip"},{"location":"#source-code","text":"As you may have surmised from the example above, source code is available at https://github.com/ubc-library-rc/fcheck , along with all of the documentation and binary files.","title":"Source code"},{"location":"api_reference/","text":"API Reference \u00b6 fcheck \u00b6 Manifest generator for data files. Produces a text file with user specificied checksums for all files from the top of a specified tree and checks line length and ASCII character status for text files. For statistics program files: SAS .sas7bdat SPSS .sav Stata .dta Checker() will report number of cases and variables as rows and columns respectively. Checker Objects \u00b6 class Checker() A collection of various tools attached to a file __init__ \u00b6 | __init__(fname: str) Initializes Checker instance fname : str Path to file __del__ \u00b6 | __del__() Destructor closes file produce_digest \u00b6 | produce_digest(prot: str = 'md5', blocksize: int = 2*16) -> str Returns hex digest for object fname : str Path to a file object prot : str Hash type. Supported hashes: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'blake2b', 'blake2s', 'md5'. Default: 'md5' blocksize : int Read block size in bytes flat_tester \u00b6 | flat_tester(**kwargs) -> dict Checks file for line length and number of records. Returns a dictionary: {'min_cols': int, 'max_cols' : int, 'numrec':int, 'constant' : bool} non_ascii_tester \u00b6 | non_ascii_tester(**kwargs) -> list Returns a list of dicts of positions of non-ASCII characters in a text file. [{'row': int, 'col':int, 'char':str}...] fname : str Path/filename Keyword arguments: flatfile : bool \u2014 Perform rectangularity check. If False, returns dictionary with all values as 'N/A' null_count \u00b6 | null_count(**kwargs) -> dict Returns an integer count of null characters in the file (\u2018\\x00\u2019) or None if skipped Keyword arguments: flatfile : bool \u2014 Test is useless if not a text file. If False, returns 'N/A' dos \u00b6 | dos(**kwargs) -> bool Checks for presence of carriage returns in file Returns True if a carriage return ie, ord(13) is present Keyword arguments: flatfile : bool \u2014 Perform rectangularity check. If False, returns dictionary with all values as 'N/A' manifest \u00b6 | manifest(out: str = 'txt', **kwargs) Returns your desired output type as string out : str \u2014 Acceptable values are \u2018txt\u2019, \u2018csv\u2019, \u2018json\u2019 Accepted keywords and defaults: digest : str \u2014 Hash algorithm. Default \u2018md5\u2019 flat : bool \u2014 Flat file checking. Default True nonascii : bool \u2014 Check for non-ASCII characters. Default True dos : bool \u2014 check for Windows CR/LF combo. Default True flatfile : bool \u2014 Perform rectangularity check. If False, returns dictionary with all values as 'N/A' headers : bool \u2014 Include csv header (only has any effect with out='csv') Default is False","title":"API reference for fcheck"},{"location":"api_reference/#api-reference","text":"","title":"API Reference"},{"location":"api_reference/#fcheck","text":"Manifest generator for data files. Produces a text file with user specificied checksums for all files from the top of a specified tree and checks line length and ASCII character status for text files. For statistics program files: SAS .sas7bdat SPSS .sav Stata .dta Checker() will report number of cases and variables as rows and columns respectively.","title":"fcheck"},{"location":"api_reference/#checker-objects","text":"class Checker() A collection of various tools attached to a file","title":"Checker Objects"},{"location":"api_reference/#__init__","text":"| __init__(fname: str) Initializes Checker instance fname : str Path to file","title":"__init__"},{"location":"api_reference/#__del__","text":"| __del__() Destructor closes file","title":"__del__"},{"location":"api_reference/#produce_digest","text":"| produce_digest(prot: str = 'md5', blocksize: int = 2*16) -> str Returns hex digest for object fname : str Path to a file object prot : str Hash type. Supported hashes: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'blake2b', 'blake2s', 'md5'. Default: 'md5' blocksize : int Read block size in bytes","title":"produce_digest"},{"location":"api_reference/#flat_tester","text":"| flat_tester(**kwargs) -> dict Checks file for line length and number of records. Returns a dictionary: {'min_cols': int, 'max_cols' : int, 'numrec':int, 'constant' : bool}","title":"flat_tester"},{"location":"api_reference/#non_ascii_tester","text":"| non_ascii_tester(**kwargs) -> list Returns a list of dicts of positions of non-ASCII characters in a text file. [{'row': int, 'col':int, 'char':str}...] fname : str Path/filename Keyword arguments: flatfile : bool \u2014 Perform rectangularity check. If False, returns dictionary with all values as 'N/A'","title":"non_ascii_tester"},{"location":"api_reference/#null_count","text":"| null_count(**kwargs) -> dict Returns an integer count of null characters in the file (\u2018\\x00\u2019) or None if skipped Keyword arguments: flatfile : bool \u2014 Test is useless if not a text file. If False, returns 'N/A'","title":"null_count"},{"location":"api_reference/#dos","text":"| dos(**kwargs) -> bool Checks for presence of carriage returns in file Returns True if a carriage return ie, ord(13) is present Keyword arguments: flatfile : bool \u2014 Perform rectangularity check. If False, returns dictionary with all values as 'N/A'","title":"dos"},{"location":"api_reference/#manifest","text":"| manifest(out: str = 'txt', **kwargs) Returns your desired output type as string out : str \u2014 Acceptable values are \u2018txt\u2019, \u2018csv\u2019, \u2018json\u2019 Accepted keywords and defaults: digest : str \u2014 Hash algorithm. Default \u2018md5\u2019 flat : bool \u2014 Flat file checking. Default True nonascii : bool \u2014 Check for non-ASCII characters. Default True dos : bool \u2014 check for Windows CR/LF combo. Default True flatfile : bool \u2014 Perform rectangularity check. If False, returns dictionary with all values as 'N/A' headers : bool \u2014 Include csv header (only has any effect with out='csv') Default is False","title":"manifest"},{"location":"building_damage_binary/","text":"Creating a binary damage \u00b6 This page will be only of interest to those deciding to build their own application from the source code. For most users, this is unnecessary and the damage console utility can be downloaded from the Github releases page . Note that you need Python and fcheck to do this, and once you do that, you can already invoke damage.py . So this is only necessary if you want to make a binary distribution that you want to give to someone else. Not everyone has a Python installation on their computer, and even if they do, they don\u2019t necessarily know how to use it. As damage is supposed to be simple to use, the easiest way to use it is as a traditional application. This means it needs to be compiled or packaged into, ideally, a single file. Users most likely to require a custom binary version of damage are: Linux users, because the distribution version may not function on their systems Mac users who are using machines with M1 processors Users with ARM chips or other uncommon system architecture To perform these steps, you will need [PyInstaller] along with an installed version of Python >= v3.6. Although these examples use absolute paths, that\u2019s not technically required. You can install PyInstaller the usual way with pip . ie. pip install PyInstaller Building with Pyinstaller \u00b6 Depending on your Python installation, you may need to build with a virtual environment (which you should probably do anyway). Damage doesn\u2019t have a lot of dependencies; you really only need pyreadstat, which installs pandas and numpy as dependencies. or, as the output of pip freeze : altgraph==0.17 importlib-metadata==4.0.1 macholib==1.14 numpy==1.20.2 pandas==1.2.4 pyinstaller==4.3 pyinstaller-hooks-contrib==2021.1 pyreadstat==1.1.0 python-dateutil==2.8.1 pytz==2021.1 six==1.15.0 typing-extensions==3.10.0.0 zipp==3.4.1 pyinstaller -F --additional-hooks-dir ./ --hidden-import pyreadstat._readstat_writer --hidden-import pandas --hidden-import pyreadstat.worker --hidden-import multiprocessing /path/to/damage.py Alternately, you can simplify the PyInstaller command by using the py_install/hook-fcheck.py file: pyinstaller -F --additional-hooks-dir=/path/to/py_install /path/to/damage.py This process will create a damage.spec file along with a build and a dist dir. Inside the dist dir will be your self-contained file, which you can do with as you like. Normally, on MacOS and linux system, the resultant damage file is placed in /usr/local/bin and for Windows computers, the damage.exe file is placed somewhere on you system PATH .","title":"Building the damage console utility"},{"location":"building_damage_binary/#creating-a-binary-damage","text":"This page will be only of interest to those deciding to build their own application from the source code. For most users, this is unnecessary and the damage console utility can be downloaded from the Github releases page . Note that you need Python and fcheck to do this, and once you do that, you can already invoke damage.py . So this is only necessary if you want to make a binary distribution that you want to give to someone else. Not everyone has a Python installation on their computer, and even if they do, they don\u2019t necessarily know how to use it. As damage is supposed to be simple to use, the easiest way to use it is as a traditional application. This means it needs to be compiled or packaged into, ideally, a single file. Users most likely to require a custom binary version of damage are: Linux users, because the distribution version may not function on their systems Mac users who are using machines with M1 processors Users with ARM chips or other uncommon system architecture To perform these steps, you will need [PyInstaller] along with an installed version of Python >= v3.6. Although these examples use absolute paths, that\u2019s not technically required. You can install PyInstaller the usual way with pip . ie. pip install PyInstaller","title":"Creating a binary damage"},{"location":"building_damage_binary/#building-with-pyinstaller","text":"Depending on your Python installation, you may need to build with a virtual environment (which you should probably do anyway). Damage doesn\u2019t have a lot of dependencies; you really only need pyreadstat, which installs pandas and numpy as dependencies. or, as the output of pip freeze : altgraph==0.17 importlib-metadata==4.0.1 macholib==1.14 numpy==1.20.2 pandas==1.2.4 pyinstaller==4.3 pyinstaller-hooks-contrib==2021.1 pyreadstat==1.1.0 python-dateutil==2.8.1 pytz==2021.1 six==1.15.0 typing-extensions==3.10.0.0 zipp==3.4.1 pyinstaller -F --additional-hooks-dir ./ --hidden-import pyreadstat._readstat_writer --hidden-import pandas --hidden-import pyreadstat.worker --hidden-import multiprocessing /path/to/damage.py Alternately, you can simplify the PyInstaller command by using the py_install/hook-fcheck.py file: pyinstaller -F --additional-hooks-dir=/path/to/py_install /path/to/damage.py This process will create a damage.spec file along with a build and a dist dir. Inside the dist dir will be your self-contained file, which you can do with as you like. Normally, on MacOS and linux system, the resultant damage file is placed in /usr/local/bin and for Windows computers, the damage.exe file is placed somewhere on you system PATH .","title":"Building with Pyinstaller"},{"location":"building_damage_gui_app/","text":"Creating your own Damage app \u00b6 This page will be only of interest to those deciding to build their own application from the source code, most likely because their processor (like ARM or M1) is not supported. For most users, this is unnecessary and Damage can be downloaded from the Github releases page . The Damage GUI application, unlike the console program, isn\u2019t included when installing fcheck , either using pip or from the source code itself. Because the Damage app uses tkinter , there are a number of problems that can arise, notably on Mac computers. Should you want to build the app, here are some guidelines on how to go about it. The build process doesn\u2019t use the same Python version as the fcheck module and the console utility. You will note in setup.py that it says python_requires:'>=3.6' . THIS IS NOT (NECESSARILY) TRUE FOR BUILDING THE GUI APP , notably on Mac computers, due to issues with tkinter . The app was built using Python 3.10.2 on Mac. Building the app requires the installation of PyInstaller and PySimpleGUI , as well as the installation of fcheck Procedure \u00b6 Windows and Linux computers \u00b6 For Windows and Linux, the easiest way is to build using the included PyInstaller .spec file. Change to the gui directory and run python3 -m PyInstaller --clean --noconfirm damage_gui_combined.spec If you don\u2019t want to use the premade .spec file: python3 -m PyInstaller --onefile --additional-hooks-dir ../py_install/ --name Damage --clean --noconfirm [any additional options go here] src/damage_gui.py Note that for Windows and Linux, any version of Python >=3.6 should suffice, unlike for Mac computers. The resultant application will be in the dist directory; place it wherever you like, MacOS \u00b6 For Mac computers, you can technically use the same procedure as above. However, it\u2019s a bit redunant for Mac, as there\u2019s no real reason to create the --onefile --windowed version as Mac apps are, by default, directories anyway. The solution is to run PyInstaller without those options, editing the resulting plist file. That is, in the source directory, run PyiInstaller, where python310 is the path to your Python 3.10 or higher Python python310 -m PyInstaller --add-binary='/System/Library/Frameworks/Tk.framework/Tk':'tk' --add-binary='/System/Library/Frameworks/Tcl.framework/Tcl':'tcl' --additional-hooks-dir ../py_install/ --icon=assets/DamageAppIcon.icns --osx-bundle-identifier=ca.ubc.library --target-arch=x86_64 --noconsole --clean --noconfirm --name Damage src/damage_gui.py And then, from the same directory: python310 customize_pyinstaller_plist.py Once that is completed, there will be Mac app bundle in dist which doesn\u2019t require unpacking at runtime. The completed app bundle can then be placed into DMG container for distribution, if required.","title":"Building the Damage GUI application"},{"location":"building_damage_gui_app/#creating-your-own-damage-app","text":"This page will be only of interest to those deciding to build their own application from the source code, most likely because their processor (like ARM or M1) is not supported. For most users, this is unnecessary and Damage can be downloaded from the Github releases page . The Damage GUI application, unlike the console program, isn\u2019t included when installing fcheck , either using pip or from the source code itself. Because the Damage app uses tkinter , there are a number of problems that can arise, notably on Mac computers. Should you want to build the app, here are some guidelines on how to go about it. The build process doesn\u2019t use the same Python version as the fcheck module and the console utility. You will note in setup.py that it says python_requires:'>=3.6' . THIS IS NOT (NECESSARILY) TRUE FOR BUILDING THE GUI APP , notably on Mac computers, due to issues with tkinter . The app was built using Python 3.10.2 on Mac. Building the app requires the installation of PyInstaller and PySimpleGUI , as well as the installation of fcheck","title":"Creating your own Damage app"},{"location":"building_damage_gui_app/#procedure","text":"","title":"Procedure"},{"location":"building_damage_gui_app/#windows-and-linux-computers","text":"For Windows and Linux, the easiest way is to build using the included PyInstaller .spec file. Change to the gui directory and run python3 -m PyInstaller --clean --noconfirm damage_gui_combined.spec If you don\u2019t want to use the premade .spec file: python3 -m PyInstaller --onefile --additional-hooks-dir ../py_install/ --name Damage --clean --noconfirm [any additional options go here] src/damage_gui.py Note that for Windows and Linux, any version of Python >=3.6 should suffice, unlike for Mac computers. The resultant application will be in the dist directory; place it wherever you like,","title":"Windows and Linux computers"},{"location":"building_damage_gui_app/#macos","text":"For Mac computers, you can technically use the same procedure as above. However, it\u2019s a bit redunant for Mac, as there\u2019s no real reason to create the --onefile --windowed version as Mac apps are, by default, directories anyway. The solution is to run PyInstaller without those options, editing the resulting plist file. That is, in the source directory, run PyiInstaller, where python310 is the path to your Python 3.10 or higher Python python310 -m PyInstaller --add-binary='/System/Library/Frameworks/Tk.framework/Tk':'tk' --add-binary='/System/Library/Frameworks/Tcl.framework/Tcl':'tcl' --additional-hooks-dir ../py_install/ --icon=assets/DamageAppIcon.icns --osx-bundle-identifier=ca.ubc.library --target-arch=x86_64 --noconsole --clean --noconfirm --name Damage src/damage_gui.py And then, from the same directory: python310 customize_pyinstaller_plist.py Once that is completed, there will be Mac app bundle in dist which doesn\u2019t require unpacking at runtime. The completed app bundle can then be placed into DMG container for distribution, if required.","title":"MacOS"},{"location":"credits/","text":"Credits \u00b6 Contact \u00b6 fcheck and damage were written by Paul Lesack of the University of British Columbia Library Research Commons . Acknowledgements \u00b6 Many thanks to Jeremy Buhler for coming up with the damage name. Reading statistical file metadata is made very simple with pyreadstat . Without pydoc-markdown , mkdocs , documentation would have been a lot harder.","title":"Credits"},{"location":"credits/#credits","text":"","title":"Credits"},{"location":"credits/#contact","text":"fcheck and damage were written by Paul Lesack of the University of British Columbia Library Research Commons .","title":"Contact"},{"location":"credits/#acknowledgements","text":"Many thanks to Jeremy Buhler for coming up with the damage name. Reading statistical file metadata is made very simple with pyreadstat . Without pydoc-markdown , mkdocs , documentation would have been a lot harder.","title":"Acknowledgements"},{"location":"faq/","text":"Frequently asked questions \u00b6 Why is there no printer dialogue when I print from Damage ? The application prints text directly to default printer; there\u2019s no formatting. For more nicely formatted text, consider opening the output document in a text editor or spreadsheet I can\u2019t edit values in Damage\u2019s csv mode? This is the expected behaviour. If you need to edit the CSV, please use a spreadsheet application. Why would you call the software \u201cdamage\u201d? Command line utility names are not easy to remember. Typing \u2018damage [filename\u2019] for the first time will burn the name into your memory. Can I rename the program? If you don\u2019t like the frisson of danger from the name, you can rename the binary files to whatever you like. manifest_generator is an obvious, if lengthy choice. Why does the software hang during examination of text files? Most of the time, the software hasn\u2019t actually crashed; it\u2019s still doing its processing, possibly more slowly than one would like. There can be two reasons for this: Every character in a text file is examined; if your file is large, the amount of time this requires is not negligble. There have been instances of file corruption where data is replaced by null characters . Using versions previous to v0.1.3 output the row and column location of every such character, which takes a very long time if there are, as has happened, tens of millions of these characters. Versions >= v0.1.3 changed this behaviour and simply output a count. TLDR; upgrade to the latest version. I try to run damage from Windows explorer or Finder and it doesn\u2019t work. What\u2019s going on? damage is a console program. That means it runs from with a Windows command prompt session or PowerShell session, and in the case of other computer sessions, within a terminal session. At this point, it doesn\u2019t have a GUI, although there\u2019s a chance that one may be added in the future. What\u2019s all this PATH and /usr/local/bin stuff? PATH is an environment variable on your computer which allows programs to invoked without laboriously typing out the full location of the program. On linux-like systems, /usr/local/bin is already part of the PATH environment variable, so just moving/copying the damage executable file there will do all the work in one step. If you are using damage.py , ie, you installed fcheck with pip , you don\u2019t need to do any of this unless you really want to.","title":"Frequently asked questions"},{"location":"faq/#frequently-asked-questions","text":"Why is there no printer dialogue when I print from Damage ? The application prints text directly to default printer; there\u2019s no formatting. For more nicely formatted text, consider opening the output document in a text editor or spreadsheet I can\u2019t edit values in Damage\u2019s csv mode? This is the expected behaviour. If you need to edit the CSV, please use a spreadsheet application. Why would you call the software \u201cdamage\u201d? Command line utility names are not easy to remember. Typing \u2018damage [filename\u2019] for the first time will burn the name into your memory. Can I rename the program? If you don\u2019t like the frisson of danger from the name, you can rename the binary files to whatever you like. manifest_generator is an obvious, if lengthy choice. Why does the software hang during examination of text files? Most of the time, the software hasn\u2019t actually crashed; it\u2019s still doing its processing, possibly more slowly than one would like. There can be two reasons for this: Every character in a text file is examined; if your file is large, the amount of time this requires is not negligble. There have been instances of file corruption where data is replaced by null characters . Using versions previous to v0.1.3 output the row and column location of every such character, which takes a very long time if there are, as has happened, tens of millions of these characters. Versions >= v0.1.3 changed this behaviour and simply output a count. TLDR; upgrade to the latest version. I try to run damage from Windows explorer or Finder and it doesn\u2019t work. What\u2019s going on? damage is a console program. That means it runs from with a Windows command prompt session or PowerShell session, and in the case of other computer sessions, within a terminal session. At this point, it doesn\u2019t have a GUI, although there\u2019s a chance that one may be added in the future. What\u2019s all this PATH and /usr/local/bin stuff? PATH is an environment variable on your computer which allows programs to invoked without laboriously typing out the full location of the program. On linux-like systems, /usr/local/bin is already part of the PATH environment variable, so just moving/copying the damage executable file there will do all the work in one step. If you are using damage.py , ie, you installed fcheck with pip , you don\u2019t need to do any of this unless you really want to.","title":"Frequently asked questions"},{"location":"how_to_use_damage/","text":"How to use the damage console utility \u00b6 Documentation is for the console utility. That means a Windows command prompt or terminal is required for use. The console utility is normally referred to with a lowercase initial \u2018d\u2019 (ie, damage ) and the full GUI application as Damage If you have installed the fcheck module with pip damage.py [options] If using the binary, and the binary is in your $PATH damage [options] If using Python directly from the source code, invoke the utility with: python3 /path/to/damage.py [options] Note that on Windows this means something like: python3 C:\\path\\to\\damage.py [options] Outputting to a file By default, the program will spit its results to the screen (stdout). To send the output to a file, run the utility and pipe the output to a file. For example: damage -o csv -r ./ > C:\\temp\\output.csv Program options \u00b6 usage: damage.py [-h] [-v] [-o OUT] [-n] [-r] [-t DIGEST] files [files ...] Produces a text, csv or JSON output with checksums for files, testing for Windows CRLF combinations, as well as checking text files for regularity and non/ASCII characters positional arguments: files Files to check. Wildcards acceptable (eg, *) optional arguments: -h, --help show this help message and exit -v, --version Show version number and exit -o OUT, --output OUT Output format. One of txt, csv, json -n, --no-flat Don't check text files for rectangularity -r, --recursive Recursive *directory* processing of file tree. Assumes that the arguments point to a directory (eg, tmp/), and a slash will be appended if one does not exist -t DIGEST, --hash-type DIGEST Checksum hash type. Supported hashes: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'blake2b', 'blake2s', 'md5'. Default: 'md5' Compiling/packaging the software on your platform \u00b6 Making your own damage binary if the supplied ones don\u2019t meet your needs is easy. See the how to create a standalone application page for details.","title":"How to use the damage console utility"},{"location":"how_to_use_damage/#how-to-use-the-damage-console-utility","text":"Documentation is for the console utility. That means a Windows command prompt or terminal is required for use. The console utility is normally referred to with a lowercase initial \u2018d\u2019 (ie, damage ) and the full GUI application as Damage If you have installed the fcheck module with pip damage.py [options] If using the binary, and the binary is in your $PATH damage [options] If using Python directly from the source code, invoke the utility with: python3 /path/to/damage.py [options] Note that on Windows this means something like: python3 C:\\path\\to\\damage.py [options] Outputting to a file By default, the program will spit its results to the screen (stdout). To send the output to a file, run the utility and pipe the output to a file. For example: damage -o csv -r ./ > C:\\temp\\output.csv","title":"How to use the damage console utility"},{"location":"how_to_use_damage/#program-options","text":"usage: damage.py [-h] [-v] [-o OUT] [-n] [-r] [-t DIGEST] files [files ...] Produces a text, csv or JSON output with checksums for files, testing for Windows CRLF combinations, as well as checking text files for regularity and non/ASCII characters positional arguments: files Files to check. Wildcards acceptable (eg, *) optional arguments: -h, --help show this help message and exit -v, --version Show version number and exit -o OUT, --output OUT Output format. One of txt, csv, json -n, --no-flat Don't check text files for rectangularity -r, --recursive Recursive *directory* processing of file tree. Assumes that the arguments point to a directory (eg, tmp/), and a slash will be appended if one does not exist -t DIGEST, --hash-type DIGEST Checksum hash type. Supported hashes: 'sha1', 'sha224', 'sha256', 'sha384', 'sha512', 'blake2b', 'blake2s', 'md5'. Default: 'md5'","title":"Program options"},{"location":"how_to_use_damage/#compilingpackaging-the-software-on-your-platform","text":"Making your own damage binary if the supplied ones don\u2019t meet your needs is easy. See the how to create a standalone application page for details.","title":"Compiling/packaging the software on your platform"},{"location":"how_to_use_gui_damage/","text":"How to use the Damage application \u00b6 Installation \u00b6 For all versions of Damage , download the latest release for your platform from the Github releases page . Note that releases for all architectures are not available. Notably, there are no versions for Apple M1 processors nor ARM architecture at the present time. Ironically, Damage could check the integrity of your download by verifying its checksum. If you wish to do so (and it\u2019s good practice to do so), you could use the damage command line tool or another utility such as openssl . For Microsoft Windows \u00b6 The Windows application is a portable file; it does not require installation. Simply unzip it and run Damage.exe . Note that the console utility, if it\u2019s installed is called damage.exe and the application is called Damage.exe , with an uppercase D. On most Windows computers, this is a distinction with out a difference. You should ensure that only one of the applications, usually damage.exe , is on your %PATH% . For MacOS \u00b6 Double-click the DMG file, and it should automatically appear in a Finder window. Drag the icon to the Applications folder. If, for some reason, you don\u2019t want to put it in the Applications folder, you can drag it somewhere else. Note that the developer(s) of Damage do not have an Apple developer account. This means that you may recive a warning about an unidentified developer as per this page: https://support.apple.com/en-ca/guide/mac-help/mh40616/mac . To start the application (for the first time only), you may have to right click on the application, select Open then agree to the conditions. You can, of course, disagree, but that would defeat the purpose of downloading it. For Linux \u00b6 Unzip the download. Like the Windows utility, it is a single file. Traditionally, you can place that file in /usr/local/bin or opt/bin , or if that is not a solution, another user-centred location is ~/.local/bin . Usage \u00b6 On running the application, you will be presented with an essentially blank interface. The workflow consists of the following easy steps: Set your preferences Select files Create the manifest Save (or print) the output The Preferences window \u00b6 The output of Damage , like all other software, will be dependent on the preferences you set. While the defaults are fine, you may need to match your output to someone else\u2019s manifest, or you don\u2019t like what the defaults are. To do this, use the Preferences window, available via the Edit/Preferences menu item. The options Shorten file paths in output : Given a list of files, the common portion of the file path will be removed in the output. For example, given two files path/to/dir_a/x.txt and path/to/dir_b/y.txt , the output will show dir_a/x.txt and dir_b/y.txt . Rectangularity check : For plain text files and statistical software files, check for line length and number of records. If a text file is meant to be a rectangular file, ie, each record or line contains the same number of observations, thus having the same line length, then the output will show constant records , and all the lines will have the same length. In the case of statistical files, the line length refers to the number of fields , ie, variables. If, for instance, the value is not constant, that means that the data set is truncated. Recursively add files from directories : When adding a folder, add all the files found in sub-folders as well. So, if folder A contains folders B and C, any files found in A, B and C will be added, all the way to to the point where no further folders are found. Hash type : Cryptographic hash algorithm used to check for file integrity. The most commonly used are likely md5 and sha256 . If checking downloaded files for integrity, use the algorithm stated on the download site. For example, on the release page for this software product, you will see that the download checksums are listed as sha256 . If checksums don\u2019t match, then file integrity is compromised. Output format : Output format of the resulting manifest. txt: Human readable plain text format csv: Comma separated value spreadsheet json: Javascript Object Notation dictionary for times when machine readable output is required. Selecting files \u00b6 You have several options to select files to analyze. Add individual files with either the Add Files button or the the menu under Files/Add Files If you would like to add an entire folder of files, select the Add Folder button or the Files/Add Folder menu. Files (with their full paths) will be added to the left sidebar, or File Section . In some cases, what seems like a file doesn\u2019t appear in the list. For instance, should you attempt to add a Mac application (which, in the Finder, looks like a single item), it will be ignored. Mac Applications are really folders, despite looking like single files. Should you really need to add an item such as this, use the Add Folder function. Removing files \u00b6 If you wish to edit the list of files, select the files you wish to remove from the File Section and use the Remove Files button, or use the convenient menu item Files/Remove Files Generating the manifest \u00b6 To generate the manifest for your selected files, hit the Generate Manifest button, use the Actions/Create Manifest menu item, or use the plaform specific short combination. Note that this operation may take a while depending on the size and complexity of the file(s) you are analyzing. Notably, statistical files with hundreds of thousands of records (or millions) may take a while. Don\u2019t assume the application has crashed if results are not instant. Once completed, the output is shown in the cleverly labelled Output Section . At this point, you can edit the results (although it\u2019s not clear why you would). More importantly, though, the saving and printing options will now be available. Output \u00b6 To save, select Actions/Save Output or use the shortcut key combination. The output will be saved with the correct extension automatically. To print, select Actions/Print Output or use the shortcut key combination. The output will be sent immediately to your default printer. Note : There is no printer selection and formatting dialogue; the manifest is sent to the printer as plain text. Note that in the case of csv files, this means that you will get raw csv, not a nice table. If you require nicely tabulated and formatted data, use a spreadsheet to open the created csv file. The Help menu \u00b6 Damage help : takes you to this page. Obviously, this requires an internet connection, but what doesn\u2019t these days Credits and Details : Developer information as well as links to the source code. What is the point of this? \u00b6 Damage is designed to ease the distribution of data by providing a standardized listing of checksums and record lengths, which ideally will be distributed with the data set itself. This allows end-users to duplicate the procedure and compare results. If you\u2019re a data provider \u00b6 Use Damage to create a data manifest which you distribute with your data and documentation. This will allow users to verify that they have exactly what you intend them to have. If you\u2019re a data user \u00b6 Use Damage to verify that what you\u2019ve received from a data provider is what they\u2019re supposed to have given you. Bonus points \u00b6 If both parties shorten file paths and use the same directory structure, then the manifests can be compared. If the checksums of the manifests are not identical, then the data structures are not identical.","title":"How to use the Damage application"},{"location":"how_to_use_gui_damage/#how-to-use-the-damage-application","text":"","title":"How to use the Damage application"},{"location":"how_to_use_gui_damage/#installation","text":"For all versions of Damage , download the latest release for your platform from the Github releases page . Note that releases for all architectures are not available. Notably, there are no versions for Apple M1 processors nor ARM architecture at the present time. Ironically, Damage could check the integrity of your download by verifying its checksum. If you wish to do so (and it\u2019s good practice to do so), you could use the damage command line tool or another utility such as openssl .","title":"Installation"},{"location":"how_to_use_gui_damage/#for-microsoft-windows","text":"The Windows application is a portable file; it does not require installation. Simply unzip it and run Damage.exe . Note that the console utility, if it\u2019s installed is called damage.exe and the application is called Damage.exe , with an uppercase D. On most Windows computers, this is a distinction with out a difference. You should ensure that only one of the applications, usually damage.exe , is on your %PATH% .","title":"For Microsoft Windows"},{"location":"how_to_use_gui_damage/#for-macos","text":"Double-click the DMG file, and it should automatically appear in a Finder window. Drag the icon to the Applications folder. If, for some reason, you don\u2019t want to put it in the Applications folder, you can drag it somewhere else. Note that the developer(s) of Damage do not have an Apple developer account. This means that you may recive a warning about an unidentified developer as per this page: https://support.apple.com/en-ca/guide/mac-help/mh40616/mac . To start the application (for the first time only), you may have to right click on the application, select Open then agree to the conditions. You can, of course, disagree, but that would defeat the purpose of downloading it.","title":"For MacOS"},{"location":"how_to_use_gui_damage/#for-linux","text":"Unzip the download. Like the Windows utility, it is a single file. Traditionally, you can place that file in /usr/local/bin or opt/bin , or if that is not a solution, another user-centred location is ~/.local/bin .","title":"For Linux"},{"location":"how_to_use_gui_damage/#usage","text":"On running the application, you will be presented with an essentially blank interface. The workflow consists of the following easy steps: Set your preferences Select files Create the manifest Save (or print) the output","title":"Usage"},{"location":"how_to_use_gui_damage/#the-preferences-window","text":"The output of Damage , like all other software, will be dependent on the preferences you set. While the defaults are fine, you may need to match your output to someone else\u2019s manifest, or you don\u2019t like what the defaults are. To do this, use the Preferences window, available via the Edit/Preferences menu item. The options Shorten file paths in output : Given a list of files, the common portion of the file path will be removed in the output. For example, given two files path/to/dir_a/x.txt and path/to/dir_b/y.txt , the output will show dir_a/x.txt and dir_b/y.txt . Rectangularity check : For plain text files and statistical software files, check for line length and number of records. If a text file is meant to be a rectangular file, ie, each record or line contains the same number of observations, thus having the same line length, then the output will show constant records , and all the lines will have the same length. In the case of statistical files, the line length refers to the number of fields , ie, variables. If, for instance, the value is not constant, that means that the data set is truncated. Recursively add files from directories : When adding a folder, add all the files found in sub-folders as well. So, if folder A contains folders B and C, any files found in A, B and C will be added, all the way to to the point where no further folders are found. Hash type : Cryptographic hash algorithm used to check for file integrity. The most commonly used are likely md5 and sha256 . If checking downloaded files for integrity, use the algorithm stated on the download site. For example, on the release page for this software product, you will see that the download checksums are listed as sha256 . If checksums don\u2019t match, then file integrity is compromised. Output format : Output format of the resulting manifest. txt: Human readable plain text format csv: Comma separated value spreadsheet json: Javascript Object Notation dictionary for times when machine readable output is required.","title":"The Preferences window"},{"location":"how_to_use_gui_damage/#selecting-files","text":"You have several options to select files to analyze. Add individual files with either the Add Files button or the the menu under Files/Add Files If you would like to add an entire folder of files, select the Add Folder button or the Files/Add Folder menu. Files (with their full paths) will be added to the left sidebar, or File Section . In some cases, what seems like a file doesn\u2019t appear in the list. For instance, should you attempt to add a Mac application (which, in the Finder, looks like a single item), it will be ignored. Mac Applications are really folders, despite looking like single files. Should you really need to add an item such as this, use the Add Folder function.","title":"Selecting files"},{"location":"how_to_use_gui_damage/#removing-files","text":"If you wish to edit the list of files, select the files you wish to remove from the File Section and use the Remove Files button, or use the convenient menu item Files/Remove Files","title":"Removing files"},{"location":"how_to_use_gui_damage/#generating-the-manifest","text":"To generate the manifest for your selected files, hit the Generate Manifest button, use the Actions/Create Manifest menu item, or use the plaform specific short combination. Note that this operation may take a while depending on the size and complexity of the file(s) you are analyzing. Notably, statistical files with hundreds of thousands of records (or millions) may take a while. Don\u2019t assume the application has crashed if results are not instant. Once completed, the output is shown in the cleverly labelled Output Section . At this point, you can edit the results (although it\u2019s not clear why you would). More importantly, though, the saving and printing options will now be available.","title":"Generating the manifest"},{"location":"how_to_use_gui_damage/#output","text":"To save, select Actions/Save Output or use the shortcut key combination. The output will be saved with the correct extension automatically. To print, select Actions/Print Output or use the shortcut key combination. The output will be sent immediately to your default printer. Note : There is no printer selection and formatting dialogue; the manifest is sent to the printer as plain text. Note that in the case of csv files, this means that you will get raw csv, not a nice table. If you require nicely tabulated and formatted data, use a spreadsheet to open the created csv file.","title":"Output"},{"location":"how_to_use_gui_damage/#the-help-menu","text":"Damage help : takes you to this page. Obviously, this requires an internet connection, but what doesn\u2019t these days Credits and Details : Developer information as well as links to the source code.","title":"The Help menu"},{"location":"how_to_use_gui_damage/#what-is-the-point-of-this","text":"Damage is designed to ease the distribution of data by providing a standardized listing of checksums and record lengths, which ideally will be distributed with the data set itself. This allows end-users to duplicate the procedure and compare results.","title":"What is the point of this?"},{"location":"how_to_use_gui_damage/#if-youre-a-data-provider","text":"Use Damage to create a data manifest which you distribute with your data and documentation. This will allow users to verify that they have exactly what you intend them to have.","title":"If you're a data provider"},{"location":"how_to_use_gui_damage/#if-youre-a-data-user","text":"Use Damage to verify that what you\u2019ve received from a data provider is what they\u2019re supposed to have given you.","title":"If you're a data user"},{"location":"how_to_use_gui_damage/#bonus-points","text":"If both parties shorten file paths and use the same directory structure, then the manifests can be compared. If the checksums of the manifests are not identical, then the data structures are not identical.","title":"Bonus points"}]}